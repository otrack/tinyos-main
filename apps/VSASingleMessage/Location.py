#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Location'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 16

# The Active Message type associated with this message.
AM_TYPE = -1

class Location(tinyos.message.Message.Message):
    # Create a new Location of size 16.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=16):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Location> \n"
        try:
            s += "  [x=%f]\n" % (self.get_x())
        except:
            pass
        try:
            s += "  [y=%f]\n" % (self.get_y())
        except:
            pass
        try:
            s += "  [pressSpeed=0x%x]\n" % (self.get_pressSpeed())
        except:
            pass
        try:
            s += "  [speed=0x%x]\n" % (self.get_speed())
        except:
            pass
        try:
            s += "  [distanceFront=0x%x]\n" % (self.get_distanceFront())
        except:
            pass
        try:
            s += "  [disJunction=0x%x]\n" % (self.get_disJunction())
        except:
            pass
        try:
            s += "  [heading=0x%x]\n" % (self.get_heading())
        except:
            pass
        try:
            s += "  [lane=0x%x]\n" % (self.get_lane())
        except:
            pass
        try:
            s += "  [distanright=0x%x]\n" % (self.get_distanright())
        except:
            pass
        try:
            s += "  [distanleft=0x%x]\n" % (self.get_distanleft())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: x
    #   Field type: float, unsigned
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'x' is signed (False).
    #
    def isSigned_x(self):
        return False
    
    #
    # Return whether the field 'x' is an array (False).
    #
    def isArray_x(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'x'
    #
    def offset_x(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'x'
    #
    def offsetBits_x(self):
        return 0
    
    #
    # Return the value (as a float) of the field 'x'
    #
    def get_x(self):
        return self.getFloatElement(self.offsetBits_x(), 32, 0)
    
    #
    # Set the value of the field 'x'
    #
    def set_x(self, value):
        self.setFloatElement(self.offsetBits_x(), 32, value, 0)
    
    #
    # Return the size, in bytes, of the field 'x'
    #
    def size_x(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'x'
    #
    def sizeBits_x(self):
        return 32
    
    #
    # Accessor methods for field: y
    #   Field type: float, unsigned
    #   Offset (bits): 32
    #   Size (bits): 32
    #

    #
    # Return whether the field 'y' is signed (False).
    #
    def isSigned_y(self):
        return False
    
    #
    # Return whether the field 'y' is an array (False).
    #
    def isArray_y(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'y'
    #
    def offset_y(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'y'
    #
    def offsetBits_y(self):
        return 32
    
    #
    # Return the value (as a float) of the field 'y'
    #
    def get_y(self):
        return self.getFloatElement(self.offsetBits_y(), 32, 0)
    
    #
    # Set the value of the field 'y'
    #
    def set_y(self, value):
        self.setFloatElement(self.offsetBits_y(), 32, value, 0)
    
    #
    # Return the size, in bytes, of the field 'y'
    #
    def size_y(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'y'
    #
    def sizeBits_y(self):
        return 32
    
    #
    # Accessor methods for field: pressSpeed
    #   Field type: short, unsigned
    #   Offset (bits): 64
    #   Size (bits): 8
    #

    #
    # Return whether the field 'pressSpeed' is signed (False).
    #
    def isSigned_pressSpeed(self):
        return False
    
    #
    # Return whether the field 'pressSpeed' is an array (False).
    #
    def isArray_pressSpeed(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pressSpeed'
    #
    def offset_pressSpeed(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'pressSpeed'
    #
    def offsetBits_pressSpeed(self):
        return 64
    
    #
    # Return the value (as a short) of the field 'pressSpeed'
    #
    def get_pressSpeed(self):
        return self.getUIntElement(self.offsetBits_pressSpeed(), 8, 0)
    
    #
    # Set the value of the field 'pressSpeed'
    #
    def set_pressSpeed(self, value):
        self.setUIntElement(self.offsetBits_pressSpeed(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'pressSpeed'
    #
    def size_pressSpeed(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'pressSpeed'
    #
    def sizeBits_pressSpeed(self):
        return 8
    
    #
    # Accessor methods for field: speed
    #   Field type: short, unsigned
    #   Offset (bits): 72
    #   Size (bits): 8
    #

    #
    # Return whether the field 'speed' is signed (False).
    #
    def isSigned_speed(self):
        return False
    
    #
    # Return whether the field 'speed' is an array (False).
    #
    def isArray_speed(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'speed'
    #
    def offset_speed(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'speed'
    #
    def offsetBits_speed(self):
        return 72
    
    #
    # Return the value (as a short) of the field 'speed'
    #
    def get_speed(self):
        return self.getUIntElement(self.offsetBits_speed(), 8, 0)
    
    #
    # Set the value of the field 'speed'
    #
    def set_speed(self, value):
        self.setUIntElement(self.offsetBits_speed(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'speed'
    #
    def size_speed(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'speed'
    #
    def sizeBits_speed(self):
        return 8
    
    #
    # Accessor methods for field: distanceFront
    #   Field type: short, unsigned
    #   Offset (bits): 80
    #   Size (bits): 8
    #

    #
    # Return whether the field 'distanceFront' is signed (False).
    #
    def isSigned_distanceFront(self):
        return False
    
    #
    # Return whether the field 'distanceFront' is an array (False).
    #
    def isArray_distanceFront(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'distanceFront'
    #
    def offset_distanceFront(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'distanceFront'
    #
    def offsetBits_distanceFront(self):
        return 80
    
    #
    # Return the value (as a short) of the field 'distanceFront'
    #
    def get_distanceFront(self):
        return self.getUIntElement(self.offsetBits_distanceFront(), 8, 0)
    
    #
    # Set the value of the field 'distanceFront'
    #
    def set_distanceFront(self, value):
        self.setUIntElement(self.offsetBits_distanceFront(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'distanceFront'
    #
    def size_distanceFront(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'distanceFront'
    #
    def sizeBits_distanceFront(self):
        return 8
    
    #
    # Accessor methods for field: disJunction
    #   Field type: short, unsigned
    #   Offset (bits): 88
    #   Size (bits): 8
    #

    #
    # Return whether the field 'disJunction' is signed (False).
    #
    def isSigned_disJunction(self):
        return False
    
    #
    # Return whether the field 'disJunction' is an array (False).
    #
    def isArray_disJunction(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'disJunction'
    #
    def offset_disJunction(self):
        return (88 / 8)
    
    #
    # Return the offset (in bits) of the field 'disJunction'
    #
    def offsetBits_disJunction(self):
        return 88
    
    #
    # Return the value (as a short) of the field 'disJunction'
    #
    def get_disJunction(self):
        return self.getUIntElement(self.offsetBits_disJunction(), 8, 0)
    
    #
    # Set the value of the field 'disJunction'
    #
    def set_disJunction(self, value):
        self.setUIntElement(self.offsetBits_disJunction(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'disJunction'
    #
    def size_disJunction(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'disJunction'
    #
    def sizeBits_disJunction(self):
        return 8
    
    #
    # Accessor methods for field: heading
    #   Field type: short, unsigned
    #   Offset (bits): 96
    #   Size (bits): 8
    #

    #
    # Return whether the field 'heading' is signed (False).
    #
    def isSigned_heading(self):
        return False
    
    #
    # Return whether the field 'heading' is an array (False).
    #
    def isArray_heading(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'heading'
    #
    def offset_heading(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'heading'
    #
    def offsetBits_heading(self):
        return 96
    
    #
    # Return the value (as a short) of the field 'heading'
    #
    def get_heading(self):
        return self.getUIntElement(self.offsetBits_heading(), 8, 0)
    
    #
    # Set the value of the field 'heading'
    #
    def set_heading(self, value):
        self.setUIntElement(self.offsetBits_heading(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'heading'
    #
    def size_heading(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'heading'
    #
    def sizeBits_heading(self):
        return 8
    
    #
    # Accessor methods for field: lane
    #   Field type: short, unsigned
    #   Offset (bits): 104
    #   Size (bits): 8
    #

    #
    # Return whether the field 'lane' is signed (False).
    #
    def isSigned_lane(self):
        return False
    
    #
    # Return whether the field 'lane' is an array (False).
    #
    def isArray_lane(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'lane'
    #
    def offset_lane(self):
        return (104 / 8)
    
    #
    # Return the offset (in bits) of the field 'lane'
    #
    def offsetBits_lane(self):
        return 104
    
    #
    # Return the value (as a short) of the field 'lane'
    #
    def get_lane(self):
        return self.getUIntElement(self.offsetBits_lane(), 8, 0)
    
    #
    # Set the value of the field 'lane'
    #
    def set_lane(self, value):
        self.setUIntElement(self.offsetBits_lane(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'lane'
    #
    def size_lane(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'lane'
    #
    def sizeBits_lane(self):
        return 8
    
    #
    # Accessor methods for field: distanright
    #   Field type: short, unsigned
    #   Offset (bits): 112
    #   Size (bits): 8
    #

    #
    # Return whether the field 'distanright' is signed (False).
    #
    def isSigned_distanright(self):
        return False
    
    #
    # Return whether the field 'distanright' is an array (False).
    #
    def isArray_distanright(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'distanright'
    #
    def offset_distanright(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'distanright'
    #
    def offsetBits_distanright(self):
        return 112
    
    #
    # Return the value (as a short) of the field 'distanright'
    #
    def get_distanright(self):
        return self.getUIntElement(self.offsetBits_distanright(), 8, 0)
    
    #
    # Set the value of the field 'distanright'
    #
    def set_distanright(self, value):
        self.setUIntElement(self.offsetBits_distanright(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'distanright'
    #
    def size_distanright(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'distanright'
    #
    def sizeBits_distanright(self):
        return 8
    
    #
    # Accessor methods for field: distanleft
    #   Field type: short, unsigned
    #   Offset (bits): 120
    #   Size (bits): 8
    #

    #
    # Return whether the field 'distanleft' is signed (False).
    #
    def isSigned_distanleft(self):
        return False
    
    #
    # Return whether the field 'distanleft' is an array (False).
    #
    def isArray_distanleft(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'distanleft'
    #
    def offset_distanleft(self):
        return (120 / 8)
    
    #
    # Return the offset (in bits) of the field 'distanleft'
    #
    def offsetBits_distanleft(self):
        return 120
    
    #
    # Return the value (as a short) of the field 'distanleft'
    #
    def get_distanleft(self):
        return self.getUIntElement(self.offsetBits_distanleft(), 8, 0)
    
    #
    # Set the value of the field 'distanleft'
    #
    def set_distanleft(self, value):
        self.setUIntElement(self.offsetBits_distanleft(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'distanleft'
    #
    def size_distanleft(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'distanleft'
    #
    def sizeBits_distanleft(self):
        return 8
    
